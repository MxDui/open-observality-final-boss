modules:
  http_2xx:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204, 301, 302, 303, 307, 308]
      method: GET
      headers:
        Host: your-domain.com
        Accept-Language: en-US
      no_follow_redirects: false
      fail_if_ssl: false
      fail_if_not_ssl: true
      fail_if_body_matches_regexp:
        - "Could not connect to database"
        - "5xx server error"
      fail_if_body_not_matches_regexp:
        - ".*"
      fail_if_header_matches: []
      fail_if_header_not_matches: []
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  http_post_2xx:
    prober: http
    timeout: 5s
    http:
      method: POST
      headers:
        Content-Type: application/json
      body: '{"status": "test"}'
      valid_status_codes: [200, 201, 202, 204]

  tcp_connect:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  pop3s_banner:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - expect: "^\\+OK"
      tls: true
      tls_config:
        insecure_skip_verify: false

  ssh_banner:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - expect: "^SSH-2.0-"
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  irc_banner:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - send: "NICK prober"
        - send: "USER prober prober prober :prober"
        - expect: "PING :([^ ]+)"
          send: "PONG :${1}"
        - expect: "^:[^ ]+ 001"

  icmp:
    prober: icmp
    timeout: 5s
    icmp:
      preferred_ip_protocol: "ip4"
      source_ip_address: ""

  icmp_ttl5:
    prober: icmp
    timeout: 5s
    icmp:
      ttl: 5

  dns_udp:
    prober: dns
    timeout: 5s
    dns:
      query_name: "your-domain.com"
      query_type: "A"
      valid_rcodes:
        - NOERROR
      validate_answer_rrs:
        fail_if_matches_regexp:
          - ".*127.0.0.1"
        fail_if_not_matches_regexp:
          - "your-domain.com.\t300\tIN\tA\t.*"
      validate_authority_rrs:
        fail_if_matches_regexp:
          - ".*127.0.0.1"
      validate_additional_rrs:
        fail_if_matches_regexp:
          - ".*127.0.0.1"
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  dns_soa:
    prober: dns
    timeout: 5s
    dns:
      query_name: "your-domain.com"
      query_type: "SOA"

  dns_tcp:
    prober: dns
    timeout: 5s
    dns:
      transport_protocol: "tcp"
      preferred_ip_protocol: "ip4"
      query_name: "your-domain.com"
      query_type: "A"

  tls_connect:
    prober: tcp
    timeout: 5s
    tcp:
      tls: true
      tls_config:
        insecure_skip_verify: false

  tls_connect_insecure:
    prober: tcp
    timeout: 5s
    tcp:
      tls: true
      tls_config:
        insecure_skip_verify: true

  smtp_starttls:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - expect: "^220 "
        - send: "EHLO prober"
        - expect: "^250-STARTTLS"
        - send: "STARTTLS"
        - expect: "^220 "
        - starttls: true
        - send: "EHLO prober"
        - expect: "^250 "
        - send: "QUIT"

  imap_starttls:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - expect: "\\* OK"
        - send: ". STARTTLS"
        - expect: "\\. OK"
        - starttls: true
        - send: ". capability"
        - expect: "\\. OK"

  kubernetes_api:
    prober: http
    timeout: 5s
    http:
      headers:
        Authorization: "Bearer TOKEN_HERE"
      tls_config:
        ca_file: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        insecure_skip_verify: false

  grpc:
    prober: grpc
    timeout: 5s
    grpc:
      service: "grpc.health.v1.Health"
      tls: true
      tls_config:
        insecure_skip_verify: false

  grpc_plain:
    prober: grpc
    timeout: 5s
    grpc:
      service: "grpc.health.v1.Health"
      tls: false